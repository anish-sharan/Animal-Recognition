
// step 1 : load data


$ !ls /kaggle/input
$ import torch
    from torchvision import datasets, transforms
    from torch.utils.data import DataLoader

    # ðŸ”¹ Define transforms
    transform = transforms.Compose([
        transforms.Resize((128, 128)),
        transforms.ToTensor()
    ])

    # ðŸ”¹ Load dataset (point directly to animals10 folder)
    train_dataset = datasets.ImageFolder("/kaggle/input/animals10/raw-img", transform=transform)

    # ðŸ”¹ DataLoader
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

    print(f"Total Images: {len(train_dataset)}")
    print(f"Classes: {train_dataset.classes}")

$   import torch
    import torch.nn as nn
    import torch.optim as optim
    from torchvision import datasets, models, transforms
    from torch.utils.data import DataLoader

    # Device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # Data transforms
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                            [0.229, 0.224, 0.225])
    ])

$   from torchvision.datasets import ImageFolder
    from torch.utils.data import Subset

    data_dir = "/kaggle/input/animals10/raw-img"

    # Load dataset
    dataset = ImageFolder(data_dir, transform=transform)

    # Just take 5000 images for faster testing
    subset = Subset(dataset, range(5000))

    # Train/Val split
    train_size = int(0.8 * len(subset))
    val_size = len(subset) - train_size
    train_dataset, val_dataset = torch.utils.data.random_split(subset, [train_size, val_size])

    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=2)
    val_loader   = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=2)

    print("Train size:", len(train_dataset), " Val size:", len(val_dataset))

$   import torch
    import torch.nn as nn
    import torch.optim as optim
    from torchvision import transforms, models
    from torch.utils.data import DataLoader
    from torchvision.datasets import ImageFolder
    from torch.utils.data import Subset

    transform = transforms.Compose([
        transforms.Resize((128, 128)),
        transforms.ToTensor(),
    ])

$   data_dir = "/kaggle/input/animals10/raw-img"

    dataset = ImageFolder(data_dir, transform=transform)
    subset = Subset(dataset, range(5000))  # smaller set

    train_size = int(0.8 * len(subset))
    val_size = len(subset) - train_size
    train_dataset, val_dataset = torch.utils.data.random_split(subset, [train_size, val_size])

    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=2)
    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=2)

    class_names = dataset.classes
    print("Classes:", class_names)

$   import torchvision.models as models
    import torch

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    model = models.resnet18(weights=None)  # no pretrained, random init
    model = model.to(device)

$ # Define classes manually
classes = ['cane', 'cavallo', 'elefante', 'farfalla', 
           'gallina', 'gatto', 'mucca', 'pecora', 
           'ragno', 'scoiattolo']

#   Number of classes
    num_classes = len(classes)

    # âœ… Model setup again
    import torch.nn as nn
    from torchvision import models

    model = models.resnet18(weights=None)   # training from scratch
    num_features = model.fc.in_features
    model.fc = nn.Linear(num_features, num_classes)  # adjust output layer

    model = model.to(device)
    print("âœ… Model ready with output classes:", classes)

$   # import torch
    import torch.nn as nn
    import torch.optim as optim
    from tqdm import tqdm  # progress bar

    # Loss & Optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Training loop
    epochs = 5  # start small, can increase later

    for epoch in range(epochs):
    model.train()
    running_loss = 0.0
    correct, total = 0, 0
    
    loop = tqdm(train_loader, desc=f"Epoch [{epoch+1}/{epochs}]")
    for images, labels in loop:
        images, labels = images.to(device), labels.to(device)
        
        # Forward
        outputs = model(images)
        loss = criterion(outputs, labels)
        
        # Backward
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        # Stats
        running_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
        
        loop.set_postfix(loss=loss.item(), acc=100*correct/total)
    
    # Validation after each epoch
    model.eval()
    val_correct, val_total = 0, 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            val_total += labels.size(0)
            val_correct += (predicted == labels).sum().item()
    
    print(f"Epoch {epoch+1} Completed - Train Acc: {100*correct/total:.2f}% | Val Acc: {100*val_correct/val_total:.2f}%")

$   model_path = "/kaggle/working/animal_classifier.pt"
    torch.save(model, model_path)
    print(f"âœ… Model saved at {model_path}")


